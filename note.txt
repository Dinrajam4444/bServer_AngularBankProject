
MVC Architecture
----------------

MVC - Model View Control 

It is an architecture used to create a backend. (Architecture - Structure)

Model - Backend code
View - frontend (templates)
Control - logic code

We keep all these in seperate files.



collection name must be plural.

.env file is used to store the environmental variables.


Environmental variables 
-----------------------

-> Variables that contain application configurations. (needs in the time of running)

-> Process - Its a module provides environmental variables.

-> The environmental variables should be secure variables(variables provides security. 
Contains configurations and secured datas of the appplication. That is why we use it as environmental variables.)

-> To convert static working of app into dynamic.


Server
------
require() - method used to import files.
listen() - To set port and configure the port.

nodemon
-------

Node does not provide automatic recompilation. So we use a server called nodemon.
nodemon is nothing but an extensibile version of node server.

Automatic recompilation of response won't happen when we use node server.
In this case, we can use nodemon server.
nodemon server automatically recompiles the response.


To install nodemon server
-------------------------

npm i nodemon

npm i -g nodemon (-g for globall)  // To intsall nodemon globally


To run the nodemon server
-------------------------

npx nodemon index.js  // npx - node package execute. npx is an extensible of npm. npx executes the node package module (npm)

For identifying diffrent requests, the nodemon server use different urls.
For each request(get/post/put/patch/delete), there will be different urls working.


To import and save env file
---------------------------

npm install --save dotenv


Front-end Server integration
----------------------------

Done using cors.
cors - It is a library.

cors - cross origin resource sharing

To install cors - npm i cors

All import codes should be at the top.

frontend (ts) -> network (converts this ts to json) -> backend (receives json data. converts this json data to js)

json() method in express - This method converts all the incoming json type datas into javascript automatically.


Database Server integration
---------------------------

mongoose - library
mongoose  - library used to integrate mongodb with node Server.

To install mongoose - npm i mongoose

connect() - method  // This is used to connect mongoose with mongodb atlas. 
                       Here BASE_URL is the variable in which connection string of mongodb atlas is stored.
                       So we need to use this variable inside connect method.
                       Use this along with process module and .env file.

If there are any issues while we connecting the server through network(it might happen when network busy or internet issues),
we can use these 
            - useUnifiedTopology:true
            - useNewUrlParser:true


modelcollections.js
-------------------

The name of model and collection should be same.

schema - fields and values of collection.

We created the model in the modelcollection.js file to connect the collection in the database and model in the modelcollection.js

mongosh - mongoshell
mongosh - used to do opeartions inside database using commands.  // opeartions - crud operations  // c- create r- read u -update d- delete


methods for mongodb operations from node(server)
------------------------------------------------

To create a new data, we create an object for it.

c - new modelname({keys:values})                - save()

                                                new users(
                                                    {
                                                    acno:123,
                                                    uname:"anu",
                                                    psw:"abc123",
                                                    balance:0,
                                                    transactions:[]
                                                    }
                                                    )

read -  accessing data from the database

r - find() - to access all datas in collection
    finOne() - to access a single data(or a particular data) in collection.
    findOne({data})     eg: findOne({acno:1000}) - object of that particular user (full object. i.e full data of that particular user)

u - findOne({})     - save()

d - deleteOne({})   - We might not need to use this often. Because in our API methods, there is delete method.

Routes
------

Router class - used to set path


destructuring the code
----------------------

making the code short.

acno=req.body.acno 

{acno}=req.body


const acno=req.body.acno
const uname=req.body.uname
const psw=req.body.psw

const {acno,uname,psw}=req.body



getprofile path in router.js

router.get('/bankuser/user-profile/:acno',logic.getProfile)     // Here we use a colon(:) to specify the varaiable acno as a param. 
                                                                // We use acno variable because the account number changes when inputting the value of the account number.

User authentication
-------------------

Security features are important.
User-authentication is done to provide extra security.


Tokens
------

User-authentications can be done by token generation


Json Web Token (JWT)
--------------------

Used to provide user-authentication.

We need to generate a token if the user is successfull in logging in.

jsonwebtoken - library. // It contains all codes related to tokens.

npm i jsonwebtoken


We need to stringify the token in the login ts file,because it is not in a string type.
We need to convert it to string using stringify.

Also we have to parse the token in the method we created in the dataservice when we access the token.

And we need to put the second arguement in the parse as empty string. Because in Angular(when parsing), there needs to be something to parse in the localStorage.
So we need to put an empty string to avoid an error.


Middlewares
-----------

Middlewares can control the requests in server.

We do the token validation using middlewares because only the middlewares can control the requests coming in the server.

middleware code - true/false

    true - allows the request to continue
    false - blocks the request


Middleware types
----------------

    -1 - Application Specific Middleware    - To control all server requests
    -2 - Router Specific Middleware         - To control specific server requets

    For all funcionalites to be working, we use Application Specific Middleware.
    For Specific or a number of functionalities, we need Router Specific Middleware.


middleware - a function with 3 arguements.   - req, res, next

req -  The arguement which is used to take from a particular request if middleware is an applied to that request.
       That is the request in which the middleware is currently applied.
       If middleware works, the requests applied to it will be working and it will have the normal working flow.
       
res -  If the middleware works (true/false) - true when it works. And the nortal logic will work at that time.
       And if its false, the logics in the backend(server) doesn't work and if we want to give a response, we can
       use the res arguement.

next - Normally when a function works, the program control will automatically come outside the function after executing the codes in the  function.
       But in the case of a middleware function, that is not the case. Here the program control doesn't exit automatically after executing the code.
       Here to continue(to take the control outside the function), we use the next function as the arguement.



const token=req.headers["access_token"] // If token not accessed there will be an error - runtime error.
                                            // That is a user(who didn't login) who try to access the methods after the login, this error will show up.

try catch   - it is a technique to handle runtime error. If error happens, the server won't continue. It will work stopping.
              We put the code(which can cause error) in the try section. 

              And if an error happens, what needs to be done - That is mentioned in catch section.
              What code should work instead of error code.

Try block always works. And if an error happens, it switches to the catch section and execute the code in the catch section.